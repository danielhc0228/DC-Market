// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/.prisma/client"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id         Int        @id @default(autoincrement())
  username   String     @unique
  email      String?    @unique
  password   String?
  phone      String?    @unique
  github_id  String?    @unique
  avatar     String?
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  tokens     SMSToken[]
  products   Product[]  @relation("UserToProduct")
  posts      Post[]
  comments   Comment[]
  likes      Like[]
  chat_rooms ChatRoom[]
  messages   Message[]

  boughtProducts  Product[] @relation("BoughtProducts") // ⬅️ Products this user bought
  writtenReviews  Review[]  @relation("Reviewer")
  receivedReviews Review[]  @relation("Reviewee")
}

model SMSToken {
  id         Int      @id @default(autoincrement())
  token      String   @unique
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId     Int
}

model Product {
  id          Int    @id @default(autoincrement())
  title       String
  price       Float
  photo       String
  description String

  isSold  Boolean @default(false) // ⬅️ Marks product as sold
  buyer   User?   @relation("BoughtProducts", fields: [buyerId], references: [id])
  buyerId Int?

  user   User @relation("UserToProduct", fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  ChatRoom ChatRoom[]

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  Review     Review[]
}

model Post {
  id          Int     @id @default(autoincrement())
  title       String
  description String?
  views       Int     @default(0)

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user     User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId   Int
  comments Comment[]
  likes    Like[]
}

model Comment {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int

  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
}

model Like {
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  userId     Int
  postId     Int

  @@id(name: "id", [userId, postId]) // this creates unique id composed of multiple attribute.
}

model ChatRoom {
  id        String  @id @default(cuid())
  users     User[]
  product   Product @relation(fields: [productId], references: [id])
  productId Int

  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  messages   Message[]
}

model Message {
  id      Int    @id @default(autoincrement())
  payload String

  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  room       ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id])
  chatRoomId String
  userId     Int
}

model Review {
  id         Int      @id @default(autoincrement())
  rating     Int // e.g. 1-5
  comment    String
  created_at DateTime @default(now())

  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId Int

  reviewer   User @relation("Reviewer", fields: [reviewerId], references: [id], onDelete: Cascade)
  reviewerId Int

  reviewee   User @relation("Reviewee", fields: [revieweeId], references: [id], onDelete: Cascade)
  revieweeId Int

  @@unique([productId, reviewerId, revieweeId]) // Optional: prevent duplicates
}
